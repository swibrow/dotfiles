install_or_update_brew_app() {
    APP_NAME="$1"

    # Check if the application is already installed
    if brew list --cask "$APP_NAME" 2>/dev/null || brew list "$APP_NAME" 2>/dev/null; then
        # If it is installed, update and upgrade
        echo "Updating and upgrading $APP_NAME..."
        brew upgrade "$APP_NAME"
    else
        # If it's not installed, install the application
        echo "Installing $APP_NAME..."
        brew install "$APP_NAME"
    fi
}

git_clone_or_update() {
    # Check if a URL was provided
    if [ -z "$1" ] || [ -z "$2" ]; then
        echo "Please provide a Git repository URL and a base directory."
        return 1
    fi
    REPO_URL="$1"
    BASE_DIR="$2"

    # Extract the directory name from the repository URL
    DIR_NAME=$(basename "$REPO_URL" .git)

    # Check if directory exists
    if [ -d "$BASE_DIR/$DIR_NAME" ]; then
        git -C "$BASE_DIR/$DIR_NAME" pull
    else
        # If it doesn't exist, clone the repository
        git clone "$REPO_URL" "$BASE_DIR/$DIR_NAME"
    fi
}

# Checkout and pull 'master' or 'main'
main() {
    # Make sure we are in a git repository
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        echo "ERROR: Current directory is not a Git repository."
        return 1
    fi

    # Checkout default branch
    MAIN_BRANCH="master"
    if [ $(git rev-parse --verify main 2>/dev/null) ]; then
        MAIN_BRANCH="main"
    fi
    CURRENT_BRANCH=$(git branch --show-current)
    if [ "$MAIN_BRANCH" = "$CURRENT_BRANCH" ]; then
        git pull origin "$CURRENT_BRANCH"
    else
        echo "Checking out default branch..."
        git fetch origin "$MAIN_BRANCH":"$MAIN_BRANCH" && git checkout "$MAIN_BRANCH"
    fi
}